from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
    Application
)
from db import get_connection
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_PHOTO = 1

async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_connection()
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º telegram_nick —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    cur.execute("SELECT telegram_nick FROM worker WHERE telegram_id = %s", (update.effective_user.id,))
    worker = cur.fetchone()
    
    if not worker:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return
    
    telegram_nick = worker[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    cur.execute("""
        SELECT id, title, status, created_at, completed_at 
        FROM "order" 
        WHERE telegram_nick = %s 
        ORDER BY created_at DESC
    """, (telegram_nick,))
    
    orders = cur.fetchall()
    
    if not orders:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    keyboard = []
    for order in orders:
        order_id, title, status, created_at, completed_at = order
        status_emoji = "‚úÖ" if status == "completed" else "üîÑ"
        button_text = f"{status_emoji} {title} (#{order_id})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"order_{order_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=reply_markup)

async def order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    order_id = int(query.data.split('_')[1])
    
    conn = get_connection()
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    cur.execute("""
        SELECT title, description, status, created_at, completed_at
        FROM "order"
        WHERE id = %s
    """, (order_id,))
    
    order = cur.fetchone()
    
    if not order:
        await query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    title, description, status, created_at, completed_at = order
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    created_at_str = created_at.strftime("%d.%m.%Y %H:%M")
    completed_at_str = completed_at.strftime("%d.%m.%Y %H:%M") if completed_at else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"""
üìã –ó–∞–∫–∞–∑ #{order_id}

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' if status == 'completed' else 'üîÑ –ê–∫—Ç–∏–≤–µ–Ω'}
üìÖ –°–æ–∑–¥–∞–Ω: {created_at_str}
üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω: {completed_at_str}
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞
    if status != 'completed':
        keyboard.append([InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç", callback_data=f"upload_photo_{order_id}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def start_photo_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    order_id = int(query.data.split('_')[2])
    context.user_data['current_order_id'] = order_id
    
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞.\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑."
    )
    return WAITING_FOR_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ ===")
    print(f"Context user_data: {context.user_data}")
    
    if 'current_order_id' not in context.user_data:
        print("–û—à–∏–±–∫–∞: current_order_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.user_data")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    order_id = context.user_data['current_order_id']
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    photo = update.message.photo[-1]
    file_id = photo.file_id
    
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
    print(f"File ID: {file_id}")
    
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º photo_file_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur.execute("""
            UPDATE "order"
            SET photo_file_id = %s
            WHERE id = %s
        """, (file_id, order_id))
        conn.commit()
        print(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete_order_{order_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await update.message.reply_photo(
            photo=file_id,
            caption="‚úÖ –§–æ—Ç–æ–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑.",
            reply_markup=reply_markup
        )
        print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('current_order_id', None)
        print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
        
        return ConversationHandler.END
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def complete_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    order_id = int(query.data.split('_')[2])
    
    conn = get_connection()
    cur = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    cur.execute("""
        UPDATE "order"
        SET status = 'completed', completed_at = %s
        WHERE id = %s
    """, (datetime.utcnow(), order_id))
    conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    await query.message.reply_text(
        "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")
        ]])
    )

async def back_to_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    conn = get_connection()
    cur = conn.cursor()
    
    cur.execute("SELECT telegram_nick FROM worker WHERE telegram_id = %s", (query.from_user.id,))
    worker = cur.fetchone()
    
    if not worker:
        await query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return
    
    telegram_nick = worker[0]
    
    cur.execute("""
        SELECT id, title, status, created_at, completed_at 
        FROM "order" 
        WHERE telegram_nick = %s 
        ORDER BY created_at DESC
    """, (telegram_nick,))
    
    orders = cur.fetchall()
    
    if not orders:
        await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    keyboard = []
    for order in orders:
        order_id, title, status, created_at, completed_at = order
        status_emoji = "‚úÖ" if status == "completed" else "üîÑ"
        button_text = f"{status_emoji} {title} (#{order_id})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"order_{order_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    await query.message.reply_text("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=reply_markup)

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
photo_upload_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_photo_upload, pattern="^upload_photo_")],
    states={
        WAITING_FOR_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
    },
    fallbacks=[],
    per_message=False,
    per_chat=True,
    name="photo_upload"
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
orders_handler = MessageHandler(filters.Regex("^üìÑ –ú–æ–∏ –∑–∞–∫–∞–∑—ã$"), my_orders)
order_details_handler = CallbackQueryHandler(order_details, pattern="^order_")
back_to_orders_handler = CallbackQueryHandler(back_to_orders, pattern="^back_to_orders$")
complete_order_handler = CallbackQueryHandler(complete_order, pattern="^complete_order_")

def register_handlers(application: Application):
    # ... existing code ...
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    photo_upload_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(upload_photo, pattern=r"^upload_photo_(\d+)$")],
        states={
            PHOTO_UPLOAD: [MessageHandler(filters.PHOTO, handle_photo)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="photo_upload",
        persistent=False,
        per_message=False,
        per_chat=True
    )
    
    print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
    application.add_handler(photo_upload_handler)
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
